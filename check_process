#!/bin/sh

# Script creado conjugando la informacion sacada de:
# 
# http://tuxtweaks.com/2012/10/send-gmail-from-the-linux-command-line/
# https://coderwall.com/p/ez1x2w/send-mail-like-a-boss
# 
# PARAMETROS
#
# primero: usuario de correo
# segundo: contraseña del correo
# tercero: palabra que contiene el nombre del proceso
# cuarto: direccion de correo que recibira el aviso
# quinto: hora de parada pues no podemos volvernos spammers.
#
# REQUISITOS PREVIOS PARA QUE EL SCRIPT ENVIE EL MENSAJE
#
# sudo apt-get install heirloom-mailx
#
# Para enviar mensajes a traves de GMail, es con este comando:
#
# echo -e "cuerpo del mensaje" | mail -v -s "asunto del mensaje" -S smtp-use-starttls -S ssl-verify=ignore -S smtp-auth=login -S smtp=smtp://smtp.gmail.com:587 -S from="usuario@gmail.com(Nombre Personal)" -S smtp-auth-user=usuario@gmail.com -S smtp-auth-password="password" -S ssl-verify=ignore destinatario@dominio.com
#
# En el caso de que sea un servidor quisquilloso como los hosting
# que no son de Ubuntu, se debe agregar al comando mail el parametro:
# "-S nss-config-dir=/etc/pki/nssdb"
# El directorio donde esta el almacen de certificados puede variar
# de una distribucion de Linux a otra. Por lo que habra que localizar
# donde se encuentre con este otro comando: sudo find / -name "cert*.db".
# Luego, quedaria asi el comando mail:
#
# echo -e "cuerpo del mensaje" | mail -v -s "asunto del mensaje" -S smtp-use-starttls -S ssl-verify=ignore -S smtp-auth=login -S smtp=smtp://smtp.gmail.com:587 -S from="usuario@gmail.com(Nombre Personal)" -S smtp-auth-user=usuario@gmail.com -S smtp-auth-password="password" -S ssl-verify=ignore -S nss-config-dir=/etc/pki/nssdb destinatario@dominio.com
#

if test $# -ne 5; then
  echo ""
  echo "Faltan parametros. Debe suplir:"
  echo ""
  echo "- Primero: usuario de correo"
  echo "- Segundo: contraseña del correo"
  echo "- Tercero: palabra que contiene el nombre del proceso"
  echo "- Cuarto: direccion de correo que recibira el aviso"
  echo "- Quinto: hora de parada pues no podemos volvernos spammers."
  echo ""
  exit 1
fi

h=`date +%k`
if test $h -gt $5; then
  dt=`date | cut -c5-19`
  echo "$dt Llego el horario de parada. No hay envio de avisos por ahora."
  exit 0
fi

sender="$1"
sender_passwd="$2"
proc="$3"
dest="$4"

first_char=`echo $proc | cut -c1-1`
rest=`echo $proc | cut -c2-`

id=`cat /dev/urandom | tr -dc '0-9a-zA-Z' | head -c 30`
# si hacemos grep sin encerrar en corchetes el primer
# caracter, nos devolvera resultado 1 o 2 aunque el proceso
# no este corriendo. y queremos saber si se devuelve 0.
ps ax | grep [$first_char]$rest > /tmp/procs.$id.txt
# excluir lo que se ejecute bajo sudo porque genera dos procesos
# que matchean con la palabra que queremos contar sus coincidencias
# y excluimos las arrobas para no contar la linea que genera tambien
# la ejecucion de nuestro script
res=`grep -v sudo /tmp/procs.$id.txt | grep -v "@" | grep -c $proc`
rm /tmp/procs.$id.txt

if test $res = "0"; then
  host=`hostname -f`
  echo -e "System: the process $proc is not running" | mail -v -s "Service Status: $host" -S smtp-use-starttls -S ssl-verify=ignore -S smtp-auth=login -S smtp=smtp://smtp.gmail.com:587 -S from="$sender(Dumbu)" -S smtp-auth-user=$sender -S smtp-auth-password="$sender_passwd" -S ssl-verify=ignore -S nss-config-dir=/etc/pki/nssdb $dest
else
  dt=`date | cut -c5-19`
  echo "$dt Hay $res proceso(s) ejecutandose cuyo nombre contiene $proc"
fi
